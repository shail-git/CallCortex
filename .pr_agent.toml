[pr_reviewer]
require_tests_review = false

[pr_code_suggestions]
num_code_suggestions = 6
extra_instructions="""\
- Maintain simplicity and readability at all times.
- Duplication is better than the wrong abstraction.
- Resist unnecessary abstraction.
- Code organization should reflect business domains. Make business concepts visible in code.
- Functions, variables, and classes must have intention-revealing names.
- Related code should be physically close.
- Each file should have a clear narrative flow.
- Maintain single responsibility in modules - if a file handles multiple concerns, split it.
- Handle errors early with guard clauses - return errors first, happy path last.
- Comments should explain "why" not "what".
- Try to avoid function lengths of 20 lines or more - split longer functions into smaller, well-named components.
- Function names must be verb phrases describing their single responsibility (e.g., `fetch_user_data`, `validate_email`).
- Function names should reveal their side effects.
- Functions should read like paragraphs. If possible, sprinkle comments as you go for ease of understanding.
- Add "TODO(john):" comments to indicate tech debt or shortcuts that should be cleaned up.
- Avoid nested conditionals deeper than 2 levels - use early returns or separate functions.
- Use Pydantic models for all data validation - no raw dictionaries for request/response handling.
- Use dependency injection for shared resources (database connections, external clients).
- Database operations must use async SQLModel queries - no blocking operations in request handlers.
- Keep route handlers thin - business logic should live in separate utility functions.
- Tests should document behavior. Test names should read like specifications.
- Each test verifies one clear scenario.
- Test complexity indicates design problems.
- Code should almost always come with tests or evals (an eval is used for ensuring the performance of our AI agent).
- Always update documentation if user facing code or behavior changes.
- YAGNI (You Aren't Gonna Need It) - Avoid premature optimization or abstraction.
"""
